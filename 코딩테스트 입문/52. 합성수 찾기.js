// 이건 못 풀어서 다른 사람들의 답을 이해하는 시간을 가짐 ㅠ

// 1. 이중 for문
function solution(n) {
  var answer = 0;
  for (let i = 4; i <= n; i++) {
    for (let j = 2; j < i; j++) {
      if (i % j === 0) {
        answer += 1;
        break;
      }
    }
  }

  return answer;
}

// 2. 에라토스테네스의 체 알고리즘
// 소수를 판별하거나 범위 내의 소수를 찾을 때 효율적으로 사용할 수 있는 알고리즘
// 이번에 처음 들어봄

function solution(n) {
  const composites = [];
  const sieve = new Array(n + 1).fill(false);

  for (let i = 2; i <= Math.sqrt(n); i++) {
    if (!sieve[i]) {
      for (let j = i * i; j <= n; j += i) {
        sieve[j] = true;
      }
    }
  }

  for (let i = 2; i <= n; i++) {
    if (sieve[i]) {
      composites.push(i); // i가 합성수인 경우 배열에 추가
    }
  }

  return composites.length;
}

/**
 * 에라토스테네스의 체는 소수를 구하는 알고리즘입니다. 고대 그리스 수학자 에라토스테네스가 발견한 것으로, 2부터 자연수 n까지의 모든 수를 나열한 다음, 2부터 시작하여 2의 배수를 지우고, 그 다음 3의 배수를 지우는 식으로, 소수가 아닌 수를 차례로 지워나가는 방법입니다. 이렇게 하면, 남아 있는 수가 모두 소수입니다.

예를 들어, 1부터 100까지의 소수를 구하려면, 다음과 같이 에라토스테네스의 체를 사용할 수 있습니다.

2부터 100까지의 수를 나열합니다.
2는 소수이므로, 2의 배수를 지웁니다.
3은 소수이므로, 3의 배수를 지웁니다.
4는 2의 배수이므로, 지웁니다.
5는 소수이므로, 지웁니다.
6은 2의 배수이므로, 지웁니다. 7은 소수이므로, 지웁니다. 8은 2의 배수이므로, 지웁니다. 9는 3의 배수이므로, 지웁니다. 10은 2의 배수이므로, 지웁니다.
이 과정을 계속하면, 11부터 100까지의 모든 수가 지워지고, 남아 있는 1, 2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97이 소수입니다.

에라토스테네스의 체는 소수를 찾는 효율적인 알고리즘으로, 컴퓨터 과학에서 널리 사용되고 있습니다.
 */
